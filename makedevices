#!/usr/local/bin/python3
# 
# ElectrOne 
#
# Ableton Live MIDI Remote Script for the Electra One
#
# makedevices: a script to make Devices.py
#
# Author: Jaap-henk Hoepman (info@xot.nl)
#
# Distributed under the MIT License, see LICENSE

from pathlib import Path
import os
import json

from versioninfo import COMMITDATE

PREAMBLE = """
# ElectraOne - Device definitions
#
# (THIS IS FILE IS AUTOGENERATED, DO NOT EDIT!)
#
# Ableton Live MIDI Remote Script for the Electra One
#
# Author: Jaap-henk Hoepman (info@xot.nl)
#
# Distributed under the MIT License, see LICENSE
#

from .ElectraOneDumper import PresetInfo

# Dictionary with preset and MIDI cc mapping data for known devices
# (indexed by device.original_name)
# - The preset is a JSON string in Electra One format.
#   (The current implementation assumes that all quantized parameters
#   are 7-bit absolute CC values while all non quantized parameters are
#   14-bit absolute values)
# - The LUA script is a string, possibly empty
# - The MIDI cc mapping data is a dictionary of Ableton Live original parameter
#   names with their corresponding MIDI CCInfo values (as ordinary tuples)
#   in the preset. The CCInfo data must match the info in the preset used for
#   the same parameter.

"""

POSTSCRIPT = """
# Return the predefined preset information for a device, None if it doesn't exist
def get_predefined_preset_info(device_name):
    # FIXME: try to read from file
    if device_name in DEVICES:
        return DEVICES[device_name]
    else:
        return None
"""

# Output file
DEVICES = 'Devices.py'

DEFAULT_LUA_SCRIPT_FILE  = 'default.lua'

TMP = Path('tmp/xot/ableton')

# Dictionary with data for remapping pages
# { 'parametername' : new page } or { 'id': new_page }

remap_data = {}

def remap_pages(d):
    """Remap controls based on remap_data; remove pages whose
       name is simply "Page x" with x > 6
    """
    if 'pages' in d:
        pages = d['pages']
        newpages = []
        for p in pages:
            if ("Page " not in p['name']) or (p['id'] < 7):
                newpages.append(p)
            else:
                print(f"! - Removing page {p['name']}. ")
            d['pages'] = newpages
    elif ('pageId' in d) and ('name' in d):
        if d['name'] in remap_data:
            new_page = remap_data[d['name']]
            print(f"! - Moving {d['name']} (control id {d['id']}) to page {new_page}. ")            
            d['pageId'] = new_page
        elif str(d['id']) in remap_data:
            new_page = remap_data[str(d['id'])]
            print(f"! - Moving {d['name']} (control id {d['id']}) to page {new_page}. ")            
            d['pageId'] = new_page
    return(d)

# main

print(f'MAKEDEVICES (version of {COMMITDATE}): fill ./Devices.py with presets in ./preloaded')
# make the tmp directory
os.makedirs(TMP, exist_ok=True)
# load the defualt lua script
with open(DEFAULT_LUA_SCRIPT_FILE,'r') as inf:
    DEFAULT_LUA_SCRIPT = inf.read()
# find the paths to all presets to preload
here = Path('.')
allpresets_paths = here.glob('preloaded/*.epr')
# open the output for writing
with open(DEVICES,'w') as outf:
    outf.write(PREAMBLE)
    outf.write('\nDEVICES = {\n')
    flag = False
    # process each preset path
    for preset_path in allpresets_paths:
        remap_data_path = preset_path.with_suffix('.remap')
        json_preset_path = preset_path
        lua_script_path = preset_path.with_suffix('.lua')
        ccmap_path = preset_path.with_suffix('.ccmap')
        device_name = preset_path.stem
        print(f'Preloading {device_name}')
        # write a comma if needed
        if flag:
            outf.write(',\n')
        flag = True
        # load the remap data
        if os.path.exists(remap_data_path):
            with open(remap_data_path,'r') as inf:
                print('- Remapping found. Loading.')
                remap_data = json.load(inf)
        else:
            remap_data = {}
        # load and process the .epr preset
        with open(json_preset_path,'r') as inf:
            #print('- Loading preset JSON.')
            json_load = json.load(inf,object_hook=remap_pages)
            #json_load = json.load(inf)
            json_preset = json.dumps(json_load, separators=(',', ':'))
            # escape single quotes in json_preset; it will be written
            # as a single-quoted string to Devices.py
            filter_quotes = str.maketrans({ "'": "\\'"})
            json_preset = json_preset.translate(filter_quotes)
        lua_script = DEFAULT_LUA_SCRIPT
        # append the .lua if it exists
        if os.path.exists(lua_script_path):
            with open(lua_script_path,'r') as inf:
                #print('- LUA script found. Loading.')
                lua_script += inf.read()
                # escape single quotes in json_preset; it will be written
                # as a single-quoted string to Devices.py
                filter_quotes = str.maketrans({ "'": "\\'"})
                lua_script = lua_script.translate(filter_quotes)
        # load the .ccmap
        with open(ccmap_path,'r') as inf:
            #print('- Loading CCMAP.')
            ccmap = inf.read()
            # Remove newlines from ccmap
            # TODO: commented out to allow comments in CC-maps
            #filter_newlines = str.maketrans({ '\n': None})
            #ccmap = ccmap.translate(filter_newlines)
        # write the preset information to DEVICES.py
        outf.write(f"'{ device_name }': PresetInfo('")
        outf.write(json_preset)
        outf.write("',\n    ")
        # LUA script may contain newlines
        outf.write('"""')
        outf.write(lua_script)
        outf.write('""",\n    ')
        outf.write(ccmap)
        outf.write(')')
        # weite the preset and lua to the TMP directory
        with open(TMP / json_preset_path.name ,'w') as eprout:
            eprout.write(json_preset)
        with open(TMP / lua_script_path.name ,'w') as luaout:
            luaout.write(lua_script)
    outf.write('\n}\n\n')
    outf.write(POSTSCRIPT)
