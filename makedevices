#!/usr/local/bin/python3
# 
# ElectrOne 
#
# Ableton Live MIDI Remote Script for the Electra One
#
# makedevices: a script to make Devices.py and to prepare the
#   files in xot/ableton for upload to the E1
#
# Author: Jaap-henk Hoepman (info@xot.nl)
#
# Distributed under the MIT License, see LICENSE

from pathlib import Path
import os
import json

from versioninfo import COMMITDATE

PREAMBLE = """
# ElectraOne - Device definitions
#
# (THIS IS FILE IS AUTOGENERATED, DO NOT EDIT!)
#
# Ableton Live MIDI Remote Script for the Electra One
#
# Author: Jaap-henk Hoepman (info@xot.nl)
#
# Distributed under the MIT License, see LICENSE
#

from .PresetInfo import PresetInfo
from .CCInfo import CCMap

# Dictionary with preset and MIDI cc mapping data for known devices
# (indexed by device.original_name)
# - The preset is a JSON string in Electra One format.
#   (The current implementation assumes that all quantized parameters
#   are 7-bit absolute CC values while all non quantized parameters are
#   14-bit absolute values)
# - The LUA script is a string, possibly empty
# - The MIDI cc mapping data is a dictionary of Ableton Live original parameter
#   names with their corresponding MIDI CCInfo values (as ordinary tuples)
#   in the preset. The CCInfo data must match the info in the preset used for
#   the same parameter.

"""

POSTSCRIPT = """
# Return the predefined preset information for a device, None if it doesn't exist
def get_predefined_preset_info(device_name):
    # FIXME: try to read from file
    if device_name in DEVICES:
        return DEVICES[device_name]
    else:
        return None
"""

# Output file
DEVICES = 'Devices.py'

# Path to file containinf the default LUA script that always needs to be
# included
DEFAULT_LUA_SCRIPT_FILE  = 'default.lua'

flag = False

def process_preset(outf,preset_path):
    """Process one preset, writing its data to outf 
    """
    global flag
    # get the paths to the data files, and the device name
    json_preset_path = preset_path
    lua_script_path = preset_path.with_suffix('.lua')
    ccmap_path = preset_path.with_suffix('.ccmap')
    device_name = preset_path.stem
    print(f'Preloading {device_name}')
    # write a comma to outf if needed
    if flag:
        outf.write(',\n')
    flag = True
    # load and process the .epr preset, remapping controls if necessary
    with open(json_preset_path,'r') as inf:
        #print('- Loading preset JSON.')
        json_load = json.load(inf)
        json_preset = json.dumps(json_load, separators=(',', ':'))
        # escape single quotes in json_preset; it will be written
        # as a single-quoted string to Devices.py
        filter_quotes = str.maketrans({ "'": "\\'"})
        filtered_json_preset = json_preset.translate(filter_quotes)
    # load the .lua script if it exist; always add DEFAULT_LUA_SCRIPT
    #lua_script = DEFAULT_LUA_SCRIPT
    lua_script = ""
    # append the .lua if it exists
    if os.path.exists(lua_script_path):
        with open(lua_script_path,'r') as inf:
            #print('- LUA script found. Loading.')
            lua_script += inf.read()
    # escape single quotes in json_preset; it will be written
    # as a single-quoted string to Devices.py
    filter_quotes = str.maketrans({ "'": "\\'"})
    filtered_lua_script = lua_script.translate(filter_quotes)
    # load the .ccmap
    with open(ccmap_path,'r') as inf:
        #print('- Loading CCMAP.')
        ccmap = inf.read()
        # Remove newlines from ccmap
        # TODO: commented out to allow comments in CC-maps
        #filter_newlines = str.maketrans({ '\n': None})
        #ccmap = ccmap.translate(filter_newlines)
    # write the preset information to DEVICES.py
    outf.write(f"'{ device_name }': PresetInfo('")
    outf.write(filtered_json_preset)
    outf.write("',\n    ")
    # LUA script may contain newlines
    outf.write('"""')
    outf.write(filtered_lua_script)
    outf.write('""",\n    ')
    outf.write(f'CCMap({ccmap})')
    outf.write(')')



# === MAIN ===

print(f'MAKEDEVICES (version of {COMMITDATE}): fill ./Devices.py with presets in ./preloaded')
# load the defualt lua script
with open(DEFAULT_LUA_SCRIPT_FILE,'r') as inf:
    DEFAULT_LUA_SCRIPT = inf.read()
# find the paths to all presets to preload
here = Path('.')
allpresets_paths = here.glob('preloaded/*.epr')
# open the output for writing
with open(DEVICES,'w') as outf:
    outf.write(PREAMBLE)
    outf.write(f'\nDEFAULT_LUA_SCRIPT="""{DEFAULT_LUA_SCRIPT}"""\n')
    outf.write('\nDEVICES = {\n')
    # process each preset path
    for preset_path in allpresets_paths:
        process_preset(outf,preset_path)
    outf.write('\n}\n\n')
    outf.write(POSTSCRIPT)
